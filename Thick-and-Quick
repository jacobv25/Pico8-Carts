pico-8 cartridge // http://www.pico-8.com
version 41
__lua__

player = {
    x = 64, 
    y = 84, 
    sprite = 1, 
    dash_sprite = 2, 
    speed = 1, 
    dash_timer = 0, 
    dashing = false,
    width = 8,
    height = 8
}
EnemyProto = {
    sprite = 18, 
    shoot_timer = 0, 
    new = function(self, x, y)
        local obj = {
            x = x or 0, 
            y = y or 0, 
            sprite = self.sprite, 
            shoot_timer = self.shoot_timer
        }
        setmetatable(obj, self)
        self.__index = self
        return obj
    end, 
    update = function(self) 
        self.shoot_timer = self.shoot_timer + 1
        if self.shoot_timer >= 60 then
            self.shoot_timer = 0
            local dx = player.x - self.x
            local dy = player.y - self.y
            local dist = sqrt(dx * dx + dy * dy)
            local nx = dx / dist
            local ny = dy / dist
            add(projectiles, {
                x = self.x, 
                y = self.y, 
                dx = nx, 
                dy = ny, 
                sprite = 33
            }) 
        end 
    end 
}

NPCProto = {
    sprite = 20, 
    dialogue = "Hello, traveler!", 
    new = function(self, x, y)
        local obj = {
            x = x or 0, 
            y = y or 0, 
            sprite = self.sprite, 
            dialogue = self.dialogue
        }
        setmetatable(obj, self)
        self.__index = self
        return obj
    end, 
    update = function(self)
        if distance(player.x, player.y, self.x, self.y) < 8 and btnp(4) then
            game_state = "dialogue"
            current_dialogue = self.dialogue 
        end 
    end 
}
door1A = {x = 50, y = 60, sprite = 60, width = 8, height = 8}
door1B = {x = 50, y = 60, sprite = 61, width = 8, height = 8}


enemies = {}
npcs = {}
projectiles = {}
spawn_timer = 0
game_state = "exploring"
current_dialogue = ""
current_room_x = 0
current_room_y = 0
debug_counter = 0  
debug = false
move_mode = "four_direction"
new_tile_x = 0
new_tile_y = 0
new_tile = 0
flag = false;

-- Define a table with the values you want to compare against
local solid_tiles = {7,             --TREES 
                    11, 12, 13, 14, --HOUSE
                    27, 28, 29, 30, --HOUSE
                    43, 44, 45, 46, --HOUSE
                    59, 62} --HOUSE

local door1A = { 60, 61 } -- DOOR 1A

function _init()
    add(npcs, NPCProto:new(30, 30)) 
end

function _update()
    spawn_timer = spawn_timer + 1

    -- Debug mode toggle (Hold X for 3 seconds)
    if btn(5) then
        debug_counter = debug_counter + 1
        if debug_counter >= 90 then  -- assuming 30 fps, 90 frames would be 3 seconds
        debug = not debug  -- toggle debug mode
            debug_counter = 0  -- reset counter
        end
    else
        debug_counter = 0  -- reset counter if any button is released
    end

    -- create an enemy ever 3 seconds
    -- if spawn_timer >= 90 then
    --     spawn_timer = 0
    --     add(enemies, EnemyProto:new(rnd(120), rnd(120))) 
    -- end

    for npc in all(npcs) do
        npc:update() 
    end
    for enemy in all(enemies) do
        enemy:update() 
    end
    for projectile in all(projectiles) do 
        projectile.x = projectile.x + projectile.dx * 2
        projectile.y = projectile.y + projectile.dy * 2
    end
    for projectile in all(projectiles) do 
        if projectile.x < 0 or projectile.x > 128 or projectile.y < 0 or projectile.y > 128 then 
            del(projectiles, projectile) 
        end 
    end



    if game_state == "exploring" then
        player.speed = player.dashing and 2 or 1
    
        local dx, dy = 0, 0
        if move_mode == "four_direction" then
            if btn(1) then -- Right
                dx = player.speed
            elseif btn(0) then -- Left
                dx = -player.speed
            elseif btn(3) then -- Down
                dy = player.speed
            elseif btn(2) then -- Up
                dy = -player.speed
            end
        else -- eight_direction
            if btn(0) then dx = dx - player.speed end
            if btn(1) then dx = dx + player.speed end
            if btn(2) then dy = dy - player.speed end
            if btn(3) then dy = dy + player.speed end
        end
    
        -- Calculate player's potential new position in terms of tilemap
        new_x = player.x + dx
        new_y = player.y + dy
        new_tile_x1 = flr(new_x / 8)
        new_tile_y1 = flr(new_y / 8)
        new_tile_x2 = flr((new_x + player.width) / 8)
        new_tile_y2 = flr((new_y + player.height) / 8)

        -- Check the tile at the potential new positions
        new_tile1 = mget(new_tile_x1, new_tile_y1)
        new_tile2 = mget(new_tile_x1, new_tile_y2)
        new_tile3 = mget(new_tile_x2, new_tile_y1)
        new_tile4 = mget(new_tile_x2, new_tile_y2)
        new_tile = new_tile1 -- For debugger

        -- Use the function to check if the new tile is a solid tile
        if not (is_in_table(new_tile1, solid_tiles) or is_in_table(new_tile2, solid_tiles) or is_in_table(new_tile3, solid_tiles) or is_in_table(new_tile4, solid_tiles)) then
            player.x = mid(0, new_x, 128 - player.width)
            player.y = mid(0, new_y, 128 - player.height)
        end
        -- Door1A and Door1B transition code
        if (is_in_table(new_tile1, door1A) or is_in_table(new_tile2, door1A) or is_in_table(new_tile3, door1A) or is_in_table(new_tile4, door1A)) then            -- collision detected, transition to next room
            player.y = 1
            current_room_y = current_room_y + 16
        end
        -- Room transition code
        if player.x == 0 then 
            player.x = 127
            current_room_x = current_room_x - 16
        elseif player.x == 127 then 
            player.x = 1
            current_room_x = current_room_x + 16
        end
        if player.y == 0 then 
            player.y = 127
            current_room_y = current_room_y - 16
        elseif player.y == 127 then 
            player.y = 1
            current_room_y = current_room_y + 16
        end

        -- Dash code
        if btnp(4) and not player.dashing then
            player.dashing = true
            player.dash_timer = 15
        end
        if player.dashing then
            player.dash_timer = player.dash_timer - 1
            if player.dash_timer <= 0 then 
                player.dashing = false
            end
        end

    elseif game_state == "dialogue" then
        if btnp(5) then 
            game_state = "exploring" 
        end 
    end 
end

function _draw()
    cls()
    map(current_room_x, current_room_y)
    for enemy in all(enemies) do
        spr(enemy.sprite, enemy.x, enemy.y) 
    end
    for projectile in all(projectiles) do
        spr(projectile.sprite, projectile.x, projectile.y)
    end
    for npc in all(npcs) do
        spr(npc.sprite, npc.x, npc.y) 
    end

    if debug then
        print("x: "..player.x.." y: "..player.y, 0, 0, 7)
        print("fps: "..flr(stat(7)), 0, 6, 7)
        print("state: "..game_state, 0, 12, 7)
        print("tile_x: "..new_tile_x.." tile_y: "..new_tile_y, 0, 18, 7)
        print("tile: "..new_tile, 0, 24, 7)
        -- print("flag: "..flag, 0, 30, 7)
        if flag then
            print("flag: true", 0, 30, 7)
        else
            print("flag: false", 0, 30, 7)
        end

    end

    if game_state == "exploring" then
        spr(player.dashing and player.dash_sprite or player.sprite, player.x, player.y)

    elseif game_state == "dialogue" then
        spr(player.sprite, player.x, player.y)
        print("x: "..player.x.." y: "..player.y, 0, 0, 7)
        print("fps: "..flr(stat(7)), 0, 6, 7)
        print("state: "..game_state, 0, 12, 7)
        rectfill(10, 94, 118, 126, 0)
        rect(10, 94, 118, 126, 7)
        print(current_dialogue, 12, 96, 7)
    end 
end

function distance(x1, y1, x2, y2)
    return sqrt((x2 - x1)^2 + (y2 - y1)^2)
end

-- Define a function to check if a value is in a table
function is_in_table(value, tbl)
    for i, v in ipairs(tbl) do
        if v == value then
            return true
        end
    end
    return false
end

-- function check_collision(a, b)
--     return a.x < b.x + b.width and
--            a.x + a.width > b.x and
--            a.y < b.y + b.height and
--            a.y + a.height > b.y
-- end

__gfx__
0000000000000000000000000000000064444446bbbbbbbb3b3bbbbbbb5333bb0000000000000dddd00ddddd5555555555555555555555555555555500000000
000000000044440000aaaa000000000064066046bbbbbbbbb3bbbbbbb533333b000000000000dd66dd0d666d5555555555555555555555555555555500000000
00700700044444400aaaaaa00000000064466446bbbbbbbbb3bb333b53333333000000000000d6666ddd666d5555555555555555555555555555555500000000
0007700000ffff0000aaaa000000000064066046bbbbbbbbbbbbb3bb53333333000000000000d6666666666d5556666666666666666666666666666500000000
00077000088888800aaaaaa00000000064466446bbbbbbbb3bbbb3bb53333333000000000000d666656566dd5556666666666666666666666666666500000000
00700700088888800aaaaaa00000000064066046bbbbbbbbb3bbbbbb53333333000000000000dddd66666dd05556666666666666666666666666666500000000
000000000fccccf00aaaaaa00000000064466446bbbbbbbbb3bbbbbbb553333b000000000000000d7576dd005556666666666666666666666666666500000000
0000000000cccc0000aaaa000000000066666666bbbbbbbbbbbbbb3bbb5444bb00000000000d0ddd777dddd05556666666666666666666666666666500000000
0000000000677700000000000000000000000000ffffffffffffffff000000000000000000de0d6dddddd6d05556666666666666666666666666666500000000
0000000006677770000000000000000000000000ffffffff6fff6fff00000000000000000dee0d6d6776d6d05556666666666666666666666666666500000000
0000000056788788003333000000000000055000ffffffffdfffdfff00000000000000000ded0ded6776ded05555555555555555555555555555555500000000
0000000056778785333883330000000000044000ffffffffffffffff00000000000000000deedddd677666009999999999999999999999999999999900000000
0000000056788888553333550000000000888800ffffffffffff6fff000000000000000000deeee6677660009999999999999999999999999999999900000000
0000000056787787005555000000000000488400ffffffffffffdff60000000000000000000dddddedded0009999999999999999999999999999999900000000
00000000056668600000000000000000000cc000ffffffff6ffffffd00000000000000000000000dedded0009999999999999999999999999999999900000000
00000000005666000000000000000000000cc000ffffffffdfffffff000000000000000000000000000000009999999999999999999999999999999900000000
00000000000000000000000000000000000000004444444400000000000000000000000000000000000000009996777779999999999999967777799900000000
00000000000000000000000000000000000000004444444400000000000000000000000000000000000000009996777779999999999999967777799900000000
00000000000000000000000000000000000000004444444400000000000000000000000000000000000000009996777779999999999999967777799900000000
00000000000880000000000000000000000000004444444400000000000000000000000000000000000000009996777779999999999999967777799900000000
00000000000880000000000000000000000000004444444400000000000000000000000000000000000000009996777779999999999999967777799900000000
00000000000000000000000000000000000000004444444400000000000000000000000000000000000000009996666669999999999999966666699900000000
00000000000000000000000000000000000000004444444400000000000000000000000000000000000000009999999999999999999999999999999900000000
00000000000000000000000000000000000000004444444400000000000000000000000000000000000000009999999999999999999999999999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000009999999999999999999999999999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000009999999999555555555555599999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000009999999999545454545454599999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000009999999999555555555555599999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000009999999999545454545454599999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000009999999999555555555555599999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000009999999999545454545454599999999900000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000009999999999555555555555599999999900000000
__map__
0707070707070707070707070707070715151516151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705050605050505050505050605050715151515151515151515151515151615000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705050505050505050505050505050715161515151516151515161515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705050505050605050506050505050715151515151515151515151516151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705060505050505050505050505050715151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705050505050505050605050605050715151515151515151515161515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705050505060b0c0d0e05050505060715151515161515161515151515151615000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705060505051b1c1d1e05050505050715151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705050505052b2c2d2e06050505050715151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705050605053b3c3d3e05050506050715151515151515151516151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705050505050505050505050505050715161615151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705050505050505060505050505050715151515151516151515151615151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0706050505060505050505060505050715151516151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705050505050505050505050505050715151515151515151515151515151516000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0705050505060505050505050505060715151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0707070707070707070707070707070715151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000252525252525250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000025252525252525250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000002525252525252525252500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000002525252525252525252500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000002525252525252525252500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000002525252525252525000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000002525252525250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000025250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000f0000002500225004250082500c250290002a000002500225004250082500c2502e0002c000002500225004250082500c2502e0002c000002500225004250082500c2502e0002c0002a0002d0002e0002c000
000800000e150101501115001100171001c1001410009100011001a10018100171001e3000d3000e300103001230014300173001a3001d3000b3000d3001030013300163001b3000b3000d30011300153001a300
011000200c053000000000000000246530c05300000000000c0530000000000000002465300000000000c0530c053000000000000000246530c05300000000000c0530c053000000c053246530c053000000c000
011000000a0100a0500a0500a0500a0500a0500a0500a0500a0500a0500a0500a0500705007050070500705007050070500705007050050500305003050030500505005050070500705005050050500305003050
011000002b03029050290502905229052290422b0202e0202e0202e0412b050270602705227052290502b0402e0402e04230030330203302135021350323304033051300402e0402b0202e0222e0222e0202e020
__music__
00 42034444
00 02034344
00 02030444

